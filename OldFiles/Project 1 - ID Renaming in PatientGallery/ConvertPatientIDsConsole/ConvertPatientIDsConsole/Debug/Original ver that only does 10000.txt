// ConvertPatientIDsConsole.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

int main(void)
{
    //int responseNum; //keyboard responses
    const int maxRows = 10000; //The maximum number of rows in the Conversion Map and/or ipatient.dat
    const int maxCols = 2; //The maximum number of columns in the Conversion Map (always 2)
    int r = 0;  //counter for rows in the Conversion Map
    int c = 0;  //counter for columns in the Conversion Map
    int iline = 0; //counter for lines in the ipatient

//    cout << "Let's Pause #1! Type a number: "; // Pause Here Type a number and press enter
//    cin >> responseNum; // Get user input from the keyboard
//    cout << "Your number is: " << responseNum; // Display the input value

    // Set the 2D Array for holding the Conversion Map data
    string conversionMap[maxRows][maxCols];
    //  int conversionMap[maxRows][maxCols];


   //    cout << "Let's Pause #2! Type a number: "; // Pause Here Type a number and press enter
   //    cin >> responseNum; // Get user input from the keyboard
   //    cout << "Your number is: " << responseNum << endl; // Display the input value

    cout << endl;
    cout << "Now, let's read in the Patient ID Conversion Mapping File" << endl;
    cout << endl;

    // Open the ConversionMap.dat file (1st column is the old Patient ID, 2nd column is the new Patient ID, space in between)
    ifstream conversionMapFile("ConversionMap.dat");

    if (!conversionMapFile.is_open())
        cout << "Error opening file";

    //Defining the loop for getting input from the file

 //   while (!conversionMapFile.eof())
 //   {
        for (r = 0; r < maxRows; r++) //Outer loop for rows
        {
            for (c = 0; c < maxCols; c++) //inner loop for columns
            {
                conversionMapFile >> conversionMap[r][c];  //Take input from file and put into mconversionMap[][] Array
            }
        }
  //  }

        for (r = 0; r < maxRows; r++)
        {
            cout << r << ": ";
            for (c = 0; c < maxCols; c++)
        {
            cout << conversionMap[r][c] << "\t";
        }
        cout << endl;
        }

    conversionMapFile.close();

    cout << endl;
    cout << "The Patient ID Conversion Mapping File has been stored." << endl;
    cout << "There are a total of " << r << " Mapping Pairs." << endl;
    cout << endl;

    cout << "Now let's check that the data from the Conversion Map has been received. " << endl; // Checking that data was received
    cout << "Type a row: "; // Type a number and press enter
    r = 0;
//   cin >> r; // Get user input from the keyboard
    cout << "Type a column: "; // Type a number and press enter
    c = 0;
//   cin >> c; // Get user input from the keyboard
    cout << "For row: " << r << " and column:" << c << "  : "; // Type a number and press enter
    cout << conversionMap[r][c] << endl;

    cout << endl;
    cout << "Now, let's read in the existing ipatient.dat file" << endl;
    cout << endl;

    // Open the ipatient.dat file for reading and writing
    ifstream ipatientFile("ipatient.dat");

    if (!ipatientFile.is_open())
        cout << "Error opening file";

    //Defining the loop for getting input from the ipatient.dat file
    string ipatientline[maxRows];
 //   while (!ipatientFile.eof())
 //   {
        for (iline = 0; iline < maxRows; iline++) //Loop for lines
        {

            getline(ipatientFile, ipatientline[iline]);
        }
 //   }

        for (iline = 0; iline < maxRows; iline++)
        {
            cout << iline << ipatientline[iline] << endl;
        }
        cout << endl;

    ipatientFile.close();

    cout << endl;
    cout << "The existing ipatient.dat file has been stored." << endl;
    cout << "There are a total of " << iline << " lines in the existing ipatient.dat file." << endl;
    cout << endl;

    // Open the new ipatientNew.dat file for writing
    ofstream ipatientFileNew("ipatientnew.dat", std::ios::trunc);

    if (!ipatientFileNew.is_open())
        cout << "Error opening file";

    //Defining the loop for writing output to the new ipatientnew.dat file
 //   while (!ipatientFileNew.eof())
 //   {
        for (iline = 0; iline < maxRows; iline++) //Loop for lines
        {
            ipatientFileNew << ipatientline[iline] << endl;
//            write(ipatientFileNew, ipatientline[iline]);
        }
 //   }

    for (iline = 0; iline < maxRows; iline++)
    {
        cout << iline << ipatientline[iline] << endl;
    }
    cout << endl;

    ipatientFileNew.close();

    cout << endl;
    cout << "The new ipatientnew.dat file has been stored." << endl;
    cout << "There are a total of " << iline << " lines written to the new ipatientnew.dat file." << endl;
    cout << endl;

    return 0;
}



// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
